# -*- coding: utf-8 -*-
"""Equipe_Comercial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PQg3ZtJeUC0e4zILZhp7t0EBqGhtsP1O
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Localizador de leads em potencial --- #
##########################################
def agente_localizador(topico, data_de_hoje):

    localizador = Agent(
        name="agente_localizador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um agente especialista em prospecção B2B. Sua função é localizar 10 empresas potenciais que podem se beneficiar de um serviço específico oferecido pela empresa do usuário.
          Ao receber o nome da empresa contratante e o serviço de interesse abaixo, você deverá:
            •	Buscar empresas que tenham perfil aderente ao serviço.
            •	Se solicitado pelo usuário empresas diferentes da já enviadas, por favor alterar.
            •	Priorizar empresas com histórico de adoção terceirização de serviços.
            •	Utilizar fontes como: LinkedIn, Google, sites de rankings corporativos, bases de dados públicas e comerciais, Crunchbase, RocketReach, entre outros.
            •	Identificar contatos chave como: responsáveis de TI, diretores,suprimentos, CTOs, COO, líderes de inovação, gestores de operações ou marketing, conforme o serviço buscado.
          Seu retorno deve conter:
            •	Nome da Empresa
            •	Site oficial
            •	Segmento / setor de atuação
            •	Contato(s) chave com cargo
            •	Canal encontrado (LinkedIn, site, etc.)
        """,
        description="Identificar empresas potenciais para atuação comercial com base no serviço de interesse e no perfil da empresa contratante.",
        tools=[google_search]
    )

    entrada_do_agente_localizador = f"Tópico: {topico}\nData de hoje: {data_de_hoje}"

    leads = call_agent(localizador, entrada_do_agente_localizador)
    return leads

################################################
# --- Agente 2: Saneador e Organizador de Informações --- #
################################################
def agente_organizador(topico, leads_localizado):
    organizador = Agent(
        name="agente_organizador",
        model="gemini-2.0-flash",
        # Inserir as instruções do Agente organizador #################################################
        instruction="""
        Você é um agente responsável por organizar os dados brutos de leads em um formato padronizado e objetivo. Sua missão é tornar a informação limpa, clara e pronta para análise.
          Receberá uma lista de empresas com dados diversos. Sua tarefa é extrair e organizar as seguintes informações para cada lead:
            •	Empresa: nome da organização
            •	Segmento: área de atuação (ex: varejo, saúde, tecnologia, etc.)
            •	Contatos: nome, cargo e canal (LinkedIn, e-mail, etc.)
          Caso algum campo esteja ausente ou vago, sinalize como "não identificado". O foco é garantir clareza e prontidão para o próximo agente.
        """,
        description="Estruturar as informações retornadas pelo Localizador de Leads para facilitar a análise do planejador."
    )

    entrada_do_agente_organizador = f"Tópico:{topico}\nLançamentos buscados: {leads_localizado}"
    # Executa o agente
    leads_organizados = call_agent(organizador, entrada_do_agente_organizador)
    return leads_organizados

######################################
# --- Agente 3: Planejador de Abordagem Comercial --- #
######################################
def agente_planejador(topico, leads_organizados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
       # model="gemini-2.5-pro-preview-03-25"
        instruction="""
            Você é um planejador de estratégias comerciais. Sua função é analisar as empresas listadas e seus contatos, e elaborar um plano de abordagem.
              Para cada empresa, você deverá:
                1.	Classificar por segmento.
                2.	Sugerir qual serviço ou oferta tem mais aderência, com base nas informações fornecidas.
                3.	Propor o tipo de abordagem mais eficaz: técnica, institucional, de valor, comparativa, etc.
              O objetivo é que o próximo agente consiga criar materiais de marketing e comunicação altamente direcionados e personalizados.
            """,
        description="Definir a melhor estratégia de abordagem comercial com base nas informações organizadas dos leads.",
        tools=[google_search]
    )
    entrada_do_agente_planejador = f"Tópico: {topico}\nPlano de post: {leads_organizados}"
    # Executa o agente
    planejamento = call_agent(planejador, entrada_do_agente_planejador)
    return planejamento

##########################################
# --- Agente 4: Criador de Marketing Direcionado --- #
##########################################
def agente_criador (topico, planejamento):
    criador = Agent(
        name="agente_criador",
        model="gemini-2.0-flash",
        #model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Você é um especialista em copywriting comercial B2B com foco em mensagens personalizadas para prospecção ativa. Seu objetivo é criar mensagens únicas e direcionadas que aumentem a chance de engajamento com cada lead.
            Você receberá para cada lead:
              •	Nome da empresa
              •	Segmento de atuação
              •	Nome e cargo do contato
              •	Canal ideal para abordagem (e-mail, LinkedIn, WhatsApp, etc.)
              •	Tipo de serviço ou oferta recomendada (vinda do agente planejador)
            Com base nisso, siga estas diretrizes:
              1. Escolha um estilo de abordagem condizente com o canal e o cargo:
                •	E-mail → mais formal e estruturado, com destaque para benefícios e diferencial.
                •	LinkedIn → abordagem consultiva e profissional, com gancho em interesses comuns ou desafios do setor.
                •	WhatsApp → breve, direto, com tom mais leve, sem perder profissionalismo.
              Exemplo de variação de tom:
                •	Para diretores ou C-level: institucional, focado em resultado e valor estratégico.
                •	Para gestores técnicos ou operacionais: mais direto, focado em ganho de eficiência e usabilidade.
              2. Inclua elementos de personalização obrigatórios:
                •	Referência ao segmento da empresa (ex: "no setor de logística...").
                •	Citação do cargo (ex: "como gerente de operações, sei que...").
                •	Uma dor ou oportunidade típica do segmento/cargo.
                •	Um benefício claro da solução oferecida.
                •	Chamada para ação leve e apropriada ao canal (ex: “podemos conversar 10 min?”, “posso te mandar um case do setor?”).
              3. Evite repetir estruturas e frases entre empresas. Cada texto deve parecer escrito sob medida.
                Modelo de retorno por lead:
                •	Empresa: Nome
                •	Segmento: Área de atuação
                •	Contato(s): Nome e cargo
                •	Canal de Abordagem: E-mail, LinkedIn, etc.
                •	Texto: Mensagem 100% personalizada com base nas diretrizes acima
            """,
        description="Criar conteúdos específicos para abordar cada lead com base na estratégia definida."
    )
    entrada_do_agente_criador = f"Tópico: {topico}\nRascunho: {planejamento}"
    # Executa o agente
    conteudo = call_agent(criador, entrada_do_agente_criador)
    return conteudo

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("🚀 Bora encontrar lead em podencial!!! 🚀")

# --- Obter Informações do Usuário ---
topico = input("❓ Por favor, digite sua empresa e o serviço que está buscando clientes em potencial: ")

# Inserir lógica do sistema de agentes ################################################
if not topico:
    print("Você esqueceu de digitar as informações!")
else:
    print(f"Perfeito! Vamos trabalhar nos seus leads {topico}")

    leads_localizado = agente_localizador(topico, data_de_hoje)
    print("\n--- 📝 Resultado do Agente 1 (Localizador) ---\n")
    display(to_markdown(leads_localizado))
    print("--------------------------------------------------------------")

    leads_organizados = agente_organizador(topico, leads_localizado)
    print("\n--- 📝 Resultado do Agente 2 (Organizador) ---\n")
    display(to_markdown(leads_organizados))
    print("--------------------------------------------------------------")

    planejamento = agente_planejador(topico, leads_organizados)
    print("\n--- 📝 Resultado do Agente 3 (Planejador) ---\n")
    display(to_markdown(planejamento))
    print("--------------------------------------------------------------")

    conteudo = agente_criador(topico, planejamento)
    print("\n--- 📝 Resultado do Agente 4 (Criador) ---\n")
    display(to_markdown(conteudo))
    print("--------------------------------------------------------------")